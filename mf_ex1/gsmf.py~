#! /usr/bin/env python

import numpy as np
import os.path, sys
from matplotlib import pyplot as plt

# Plot
ytit ='$log(\Phi/{\\rm d}logM\,Mpc^{-3}h^{3})$'
xtit ='$log_{10}(M/{\\rm M}_{\odot}h^{-1})$'

fig = plt.figure()
plt.xlabel(xtit) ; plt.ylabel(ytit)
plt.xlim(6.5,12.5) ; plt.ylim(-5.5,0)

# Observations from Baldry
ff = 'gsmf-B12.txt' ; oh0 = 0.7
ologM, ophi, oe = np.loadtxt(ff,usecols=[0,2,3],unpack=True)
ologM = ologM + np.log10(oh0)
ologphi = np.log10(ophi) - 3. - 3*np.log10(oh0)
oerr = oe/ophi/np.log(10.)

plt.errorbar(ologM,ologphi,yerr=oerr,color='r',ecolor='r',fmt='o',label='Baldry+12')
#plt.errorbar(ologM,ologphi,yerr=[ole,ohe],fmt='o',label='Baldry+08')

# Schechter function from Panter'07
oh0 = 0.71
fs = 1.-1.222
phis = 0.0022
lms = np.log10(1.005) + 11. 
mm = 10.**(ologM - lms)
phi = np.log(10)*phis*(mm**fs)*np.exp(-mm)
phi = np.log10(phi) - 3*np.log10(oh0)  
plt.plot(ologM + np.log10(oh0), phi,'r',label='Panter+07 Schechter fit')

## DM MF 
#ff = 'mf.txt' ; f = open(ff,'r')
#data = f.readlines() ; f.close()
#
## Count number of lines that are not header
#fb = 0.04/0.308 ; nl = 0
#for line in data:
#    if line[0].isdigit():
#        nl = nl + 1
#print nl,' read lines'    
#logM, logphi = [np.zeros(shape=(nl)) for i in range(2)]
#nl = 0
#for line in data:
#    if(line[0].isdigit()):
#        logM[nl] = line.split(',')[0] 
#        logphi[nl] = line.split(',')[1]
#        #print nl,logM[nl],logphi[nl]
#        nl = nl + 1
#
##plt.plot(logM,logphi,'k',label='Mhalo')
#plt.plot(logM + np.log10(fb),logphi,'k',label='M$_{\\rm halo, DB}$*0.04/0.308')
#val1 = np.interp(lms + np.log10(oh0),logM + np.log10(fb),logphi) 
#val2 = np.interp(lms + np.log10(oh0),ologM + np.log10(oh0), phi)
#plt.plot(logM + np.log10(fb), logphi-(val1-val2),'k--',label='Normalised M$_{\\rm halo, DB}\cdot f_b}$')
#
## DeLucia MF 
#ff = 'delucia_gsmf.txt' ; f = open(ff,'r')
#data = f.readlines() ; f.close()
#
## Count number of lines that are not header
#nl = 0
#for line in data:
#    if line[0].isdigit():
#        nl = nl + 1
#print nl,' read lines'    
#logM, logphi = [np.zeros(shape=(nl)) for i in range(2)]
#nl = 0
#for line in data:
#    if(line[0].isdigit()):
#        logM[nl] = line.split(',')[0]
#        logphi[nl] = line.split(',')[1]
#        #print nl,logM[nl],logphi[nl]
#        nl = nl + 1
#
##plt.plot(logM,logphi,'r',label='DeLucia+06')
#
#
## Legend
#leg = plt.legend(loc=3)
#leg.draw_frame(False)
#
###########################
plt.show()
## Save figure
#plotfile = "mhfbnorm.pdf"
#fig.savefig(plotfile)
#print plotfile
#print 'Output:', plotfile
